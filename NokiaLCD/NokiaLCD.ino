//LCD code from Adafruit
//buzzer code from http://www.multiwingspan.co.uk/arduino.php?page=buzzer3

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include "note.h"

// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

// Hardware SPI (faster, but must use certain hardware pins):
// SCK is LCD serial clock (SCLK) - this is pin 13 on Arduino Uno
// MOSI is LCD DIN - this is pin 11 on an Arduino Uno
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
// Adafruit_PCD8544 display = Adafruit_PCD8544(5, 4, 3);
// Note with hardware SPI MISO and SS pins aren't used but will still be read
// and written to during SPI transfer.  Be careful sharing these pins!

const int rest = 0;
const int buzzerPin = 8;
int tempo = 150;

int tune[] = {n_A3, n_B3, n_C4, n_G3, n_G3, n_D4};
int beats[] = { 1, 2, 8, 1, 2, 8};
int tunelength = 6;

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16

static const unsigned char PROGMEM logo16_glcd_bmp[] =
{
0xf,0xc0,
0x3f,0xf0,
0x78,0x38,
0x60,0x1c,
0x60,0xc,
0x63,0x86,
0x63,0xc6,
0x31,0xc6,
0x31,0xc6,
0x31,0xc6,
0x31,0x86,
0x30,0xc,
0x30,0x1c,
0x18,0xf8,
0x1f,0xf0,
0xf,0x80
};
  
static const unsigned char PROGMEM dandandin_bmp[] =
{
0x0,0x0,0x0,0x0,0xb,0xf4,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x2,0xff,0xff,0x80,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xe0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0xff,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0xff,0xff,0xff,0xfc,0x0,0x0,0x0,0x0,
0x0,0x0,0x1,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x3,0xff,0xfa,0x57,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0xff,0x40,0x2,0xff,0x80,0x0,0x0,0x0,
0x0,0x0,0x7,0xf0,0x1a,0xa0,0x7f,0xc0,0x0,0x0,0x0,
0x0,0x0,0xf,0xe5,0x42,0x15,0x1f,0xe0,0x0,0x0,0x0,
0x0,0x0,0xf,0xf2,0x29,0x65,0x4f,0xf0,0x0,0x0,0x0,
0x0,0x0,0xf,0xd1,0x24,0x10,0x97,0xf0,0x0,0x0,0x0,
0x0,0x0,0xf,0xc9,0x12,0x4a,0x47,0xf8,0x0,0x0,0x0,
0x0,0x0,0xf,0xe4,0x89,0x9,0x2b,0xf8,0x0,0x0,0x0,
0x0,0x0,0xf,0xd2,0x24,0xe4,0xa1,0xf8,0x0,0x0,0x0,
0x0,0x0,0xf,0xe9,0x4f,0xf0,0x15,0xf8,0x0,0x0,0x0,
0x0,0x0,0x7,0xe4,0x5f,0xfd,0x40,0xfc,0x0,0x0,0x0,
0x0,0x0,0x7,0xe3,0xf,0xfe,0x2a,0xfc,0x0,0x0,0x0,
0x0,0x0,0x7,0xf4,0x4f,0xfe,0x80,0xfc,0x0,0x0,0x0,
0x0,0x0,0x7,0xf1,0x27,0xfe,0x6c,0x7e,0x0,0x0,0x0,
0x0,0x0,0x7,0xe4,0x97,0xff,0x5,0x7c,0x0,0x0,0x0,
0x0,0x0,0x3,0xf2,0x4f,0xff,0x50,0x7e,0x0,0x0,0x0,
0x0,0x0,0x3,0xf9,0x27,0xff,0x5,0x7e,0x0,0x0,0x0,
0x0,0x0,0x3,0xf4,0x97,0xff,0xd2,0x7e,0x0,0x0,0x0,
0x0,0x0,0x3,0xf2,0x47,0xff,0x11,0x7e,0x0,0x0,0x0,
0x0,0x0,0x3,0xf8,0x93,0xff,0x88,0x7e,0x0,0x0,0x0,
0x0,0x0,0x1,0xf9,0x27,0xff,0x56,0x7e,0x0,0x0,0x0,
0x0,0x0,0x3,0xf9,0x13,0xff,0x2,0x7e,0x0,0x0,0x0,
0x0,0x0,0x1,0xfc,0x8b,0xff,0x52,0x7e,0x0,0x0,0x0,
0x0,0x0,0x1,0xf8,0xa7,0xfe,0x28,0xfc,0x0,0x0,0x0,
0x0,0x0,0x1,0xfe,0x53,0xfd,0x42,0x7c,0x0,0x0,0x0,
0x0,0x0,0x1,0xf9,0x11,0xf1,0x29,0xfc,0x0,0x0,0x0,
0x0,0x0,0x0,0xfc,0x8b,0x8,0x89,0xfc,0x0,0x0,0x0,
0x0,0x0,0x1,0xfc,0x50,0x42,0x41,0xf8,0x0,0x0,0x0,
0x0,0x0,0x0,0xfe,0x85,0x55,0x17,0xf8,0x0,0x0,0x0,
0x0,0x0,0x0,0xfe,0x50,0x20,0xc7,0xf0,0x0,0x0,0x0,
0x0,0x0,0x0,0xfc,0x15,0x14,0x4f,0xf0,0x0,0x0,0x0,
0x0,0x0,0x0,0x7e,0xc8,0xa2,0x3f,0xe0,0x0,0x0,0x0,
0x0,0x0,0x0,0xfe,0x22,0x88,0x7f,0xe0,0x0,0x0,0x0,
0x0,0x0,0x0,0x7e,0x88,0x47,0xff,0x80,0x0,0x0,0x0,
0x0,0x0,0x0,0x7f,0x44,0xf7,0xff,0x80,0x0,0x0,0x0,
0x0,0x0,0x0,0x7f,0xaf,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x3f,0xff,0xff,0xfc,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x3f,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xe0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0xf,0xff,0xff,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0xff,0xe8,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,0x0,0x0,0x0
};


void setup() {
  pinMode(buzzerPin, OUTPUT);
  // put your setup code here, to run once:
  display.begin();
  // init done

  // you can change the contrast around to adapt the display
  // for the best viewing!
  display.setContrast(60);

  //display.display(); // show splashscreen
  //delay(2000);
  display.clearDisplay();   // clears the screen and buffer

  display.drawBitmap(0, 0, dandandin_bmp, 84, 48, BLACK);
  display.display();
  for (int i =0;i<tunelength;i++)
  {
    if (tune[i]==rest)
    {
      delay(beats[i]*tempo);
    } 
    else
    {
      tone(buzzerPin, tune[i], beats[i]*tempo);
      delay(beats[i]*tempo); 
    }
    delay(tempo/10);
  }
  //delay(5000);
  display.clearDisplay();
  
  display.setTextSize(1);
  display.setTextColor(BLACK);
  display.setCursor(0,0);
  display.println("Let it goooo");
  display.setTextColor(WHITE, BLACK); // 'inverted' text
  display.setTextSize(2);
  display.println("Let it");
  display.setTextSize(3);
  display.setTextColor(BLACK);
  display.print("gooo");
  display.display();
  delay(5000);
  display.clearDisplay();

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_WIDTH, LOGO16_GLCD_HEIGHT);

}

void loop() {
  // put your main code here, to run repeatedly:

}

void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
  srandom(666);     // whatever seed
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random() % display.width();
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random() % 5 + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK);
    }
    display.display();
    //delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, WHITE);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random() % display.width();
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random() % 5 + 1;
      }
    }
   }
}
