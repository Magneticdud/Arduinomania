//LCD code from Adafruit
//buzzer code from http://www.multiwingspan.co.uk/arduino.php?page=buzzer3

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include "note.h"

// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

// Hardware SPI (faster, but must use certain hardware pins):
// SCK is LCD serial clock (SCLK) - this is pin 13 on Arduino Uno
// MOSI is LCD DIN - this is pin 11 on an Arduino Uno
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
// Adafruit_PCD8544 display = Adafruit_PCD8544(5, 4, 3);
// Note with hardware SPI MISO and SS pins aren't used but will still be read
// and written to during SPI transfer.  Be careful sharing these pins!

const int backlightPin = 9;

const int rest = 0;
const int buzzerPin = 8;
int tempo = 150;

int tune[] = {n_A3, n_B3, n_C4, n_G3, n_G3, n_D4, 0, n_C4, n_A3, n_A3, n_A3, n_A3, n_B3, n_C4};
int beats[] = { 1, 2, 8, 1, 2, 8, 2, 2, 1, 1, 2, 2, 2, 8};
int tunelength = 14;

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16

static const unsigned char PROGMEM logo16_glcd_bmp[] =
{
0x0,0x0,
0xa,0x50,
0xe,0x70,
0x3c,0x3c,
0x7,0xe0,
0x47,0xe2,
0x4b,0xd2,
0x7f,0xfe,
0x7f,0xfe,
0x4b,0xd2,
0x47,0xe2,
0x7,0xe0,
0x3c,0x3c,
0xe,0x70,
0xa,0x50,
0x0,0x0
};
  
static const unsigned char PROGMEM dandandin_bmp[] =
{
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x10,0x70,0xf0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x8d,0xa0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x86,0xc0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x82,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0xf3,0xbd,0x7d,0x40,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x89,0xbd,0xfb,0xc0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x83,0xbe,0xe3,0x40,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x86,0xbe,0x7f,0x80,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xf8,0x0,0x2,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3f,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x1,0xe0,
0x3f,0xfc,0x0,0x0,0x1c,0x0,0x0,0x0,0x7,0x1,0xc0,
0x1f,0xfd,0xff,0x80,0xff,0xf,0xfe,0x7f,0xe7,0x81,0xc0,
0x1e,0x0,0xff,0xc3,0xff,0xce,0xbc,0x7f,0xe7,0xc1,0xc0,
0x1e,0x0,0xe1,0xe2,0x1,0xe0,0x3c,0x70,0x7,0xe0,0xc0,
0x1e,0x0,0xe1,0xe5,0xe0,0xe0,0x3c,0x70,0x7,0xf0,0xc0,
0x1e,0x0,0xe1,0xe7,0xe0,0xf0,0x78,0x70,0x7,0xf8,0xe0,
0x1f,0xf8,0xe1,0xc6,0x0,0x70,0xf0,0x78,0x87,0xfc,0xc0,
0x1f,0xf8,0xef,0x86,0x0,0x70,0xf0,0x7f,0xc7,0x7e,0xc0,
0x1f,0xf0,0xef,0xe,0x0,0x71,0xe0,0x7f,0xe7,0x3f,0xc0,
0x1e,0x0,0xf7,0x8e,0x0,0xf1,0xc0,0x70,0x7,0xf,0xc0,
0x1e,0x0,0xf7,0xc7,0x0,0xf3,0xc0,0x70,0x7,0x7,0xc0,
0x1e,0x0,0xf3,0xc7,0x80,0xe3,0xc0,0x70,0x7,0x7,0xc0,
0x1e,0x0,0xf1,0xe7,0xc3,0xe7,0x80,0x70,0x7,0x3,0xc0,
0x1e,0x0,0xf1,0xf3,0xff,0xcf,0xfe,0x7c,0x17,0x1,0xc0,
0x1e,0x0,0xf0,0x79,0xff,0x1f,0xfe,0x7f,0xf7,0x0,0xc0,
0x1e,0x0,0xf0,0x1e,0x7e,0x7f,0xfc,0xff,0xe7,0x0,0x60,
0x3e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,
0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

void setup() {
  pinMode(buzzerPin, OUTPUT);
  pinMode(backlightPin, OUTPUT);
  // put your setup code here, to run once:
  display.begin();
  // init done

  // you can change the contrast around to adapt the display
  // for the best viewing!
  display.setContrast(60);

  //display.display(); // show splashscreen
  //delay(2000);
  display.clearDisplay();   // clears the screen and buffer

  display.drawBitmap(0, 0, dandandin_bmp, 84, 48, BLACK);
  display.display();
  for (int i =0;i<tunelength;i++)
  {
    if (tune[i]==rest)
    {
      delay(beats[i]*tempo);
    } 
    else
    {
      tone(buzzerPin, tune[i], beats[i]*tempo);
      delay(beats[i]*tempo); 
    }
    delay(tempo/10);
  }
  //delay(5000);
  display.clearDisplay();
  
  digitalWrite(backlightPin, HIGH);
  display.setTextSize(1);
  display.setTextColor(BLACK);
  display.setCursor(0,0);
  display.println("Let it goooo");
  display.setTextColor(WHITE, BLACK); // 'inverted' text
  display.setTextSize(2);
  display.println("Let it");
  display.setTextSize(3);
  display.setTextColor(BLACK);
  display.print("gooo");
  display.display();
  delay(5000);
  display.clearDisplay();
  
  digitalWrite(backlightPin, LOW);

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_WIDTH, LOGO16_GLCD_HEIGHT);

}

void loop() {
  // put your main code here, to run repeatedly:

}

void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
  srandom(666);     // whatever seed
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random() % display.width();
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random() % 5 + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK);
    }
    display.display();
    //delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, WHITE);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random() % display.width();
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random() % 5 + 1;
      }
    }
   }
}
