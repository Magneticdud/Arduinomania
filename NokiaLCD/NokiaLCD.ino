#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

// Hardware SPI (faster, but must use certain hardware pins):
// SCK is LCD serial clock (SCLK) - this is pin 13 on Arduino Uno
// MOSI is LCD DIN - this is pin 11 on an Arduino Uno
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
// Adafruit_PCD8544 display = Adafruit_PCD8544(5, 4, 3);
// Note with hardware SPI MISO and SS pins aren't used but will still be read
// and written to during SPI transfer.  Be careful sharing these pins!

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16

static const unsigned char PROGMEM logo16_glcd_bmp[] =
{
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1d,0xb8,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1b,0xd8,
0x1c,0x38,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8,
0x1f,0xf8
};
  
static const unsigned char PROGMEM rolens_bmp[] =
{
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xf1,0xf8,0x7f,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xe1,0xf8,0x7f,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xf1,0xf8,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xbf,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xdf,0xff,0xbf,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xc7,0xfe,0x3f,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xe0,0x0,0x7f,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xf8,0x1,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xfe,0x5,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xff,0x0,0x0,0x0,0x0
};

void setup() {
  // put your setup code here, to run once:
  display.begin();
  // init done

  // you can change the contrast around to adapt the display
  // for the best viewing!
  display.setContrast(60);

  //display.display(); // show splashscreen
  //delay(2000);
  display.clearDisplay();   // clears the screen and buffer

  display.drawBitmap(0, 0, rolens_bmp, 84, 48, BLACK);
  display.display();
  delay(2000);
  display.clearDisplay();
  
  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(30, 16,  logo16_glcd_bmp, 16, 16, 1);
  display.display();

  // invert the display
  display.invertDisplay(true);
  delay(1000); 
  display.invertDisplay(false);
  delay(1000);

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_WIDTH, LOGO16_GLCD_HEIGHT);

}

void loop() {
  // put your main code here, to run repeatedly:

}

void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
  srandom(666);     // whatever seed
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random() % display.width();
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random() % 5 + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK);
    }
    display.display();
    //delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, WHITE);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random() % display.width();
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random() % 5 + 1;
      }
    }
   }
}
